@use "sass:math";

// Mixin to create margin and padding utility classes like Bootstrap 4+
// --------------------------------------------------------------------------
// creates {property}{sides}-{size}
// where {property} is m (for margin) or p (for padding)

$sides: ('t': 'top',
	'r': 'right',
	'b': 'bottom',
	'l': 'left',
	'x': '', // for classes that set both *-left and *-right
	'y': '', // for classes that set both *-top and *-bottom
	'': '' // for classes that set a margin or padding on all 4 sides of the element
);

$sizes: (0: 0,
	1: $spacer * .25,
	2: $spacer * .5,
	3: $spacer,
	4: $spacer * 1.5,
	5: $spacer * 3,
	'auto': auto);

// a map of properties with names
$properties: ('m': 'margin',
	'p': 'padding'
);

@mixin make-margin-padding() {

	@each $propertyname,
	$property in $properties {

		@each $sidename,
		$side in $sides {

			@each $sizename,
			$size in $sizes {
				@if $sidename=='x' {

					// .mx-4
					.#{$propertyname}#{$sidename}-#{$sizename} {
						#{$property}-left: $size !important;
						#{$property}-right: $size !important;
					}
				}

				@else if $sidename=='y' {

					// .py-3
					.#{$propertyname}#{$sidename}-#{$sizename} {
						#{$property}-top: $size !important;
						#{$property}-bottom: $size !important;
					}
				}

				@else if $sidename=='' {

					// .m-0
					.#{$propertyname}-#{$sizename} {
						#{$property}: $size !important;
					}
				}

				@else {
					.#{$propertyname}#{$sidename}-#{$sizename} {
						#{$property}-#{$side}: $size !important;
					}
				}
			}
		}
	}
}



// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
	$red: nth($linear-channel-values, red($color) + 1);
	$green: nth($linear-channel-values, green($color) + 1);
	$blue: nth($linear-channel-values, blue($color) + 1);

	@return .2126 * $red+.7152 * $green+.0722 * $blue;
}

// Calculate the contrast ratio between two colors.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function contrast($back, $front) {
	$backLum: luminance($back) + .05;
	$foreLum: luminance($front) + .05;

	// @return max($backLum, $foreLum) / min($backLum, $foreLum);
	@return math.div(max($backLum, $foreLum), min($backLum, $foreLum));
}

// Determine whether to use dark or light text on top of given color.
// Returns black for dark text and white for light text.
@function choose-contrast-color($color) {
	$lightContrast: contrast($color, white);
	$darkContrast: contrast($color, black);

	@if ($lightContrast > $darkContrast) {
		@return $white;
	}

	@else {
		@return $black;
	}
}
